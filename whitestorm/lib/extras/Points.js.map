{"version":3,"sources":["extras/Points.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AAEZ;;AACA;;AACA;;;;;;IAEM,M;;;AACJ;;;;;;AAKA,kBAAY,MAAZ,EAAoB;AAAA;;AAAA;;AAAA,wGACZ;AACJ,gBAAU,KADN;;AAGJ,gBAAU;AACR,cAAM;AADE;AAHN,KADY;;AASlB,gGAAgB,MAAhB;;AAEA,QAAM,SAAS,OAAO,QAAP,CAAgB,MAA/B;;AAEA,QAAM,SAAS,IAAI,MAAM,MAAV,CACb,OAAO,QADM,EAEb,uBAAa,OAAO,QAApB,CAFa,CAAf;;AAKA,UAAK,SAAL,CAAe,MAAf;;AAEA,QAAM,QAAQ,OAAO,MAAP,QAAoB;AAChC,aAAO;AADyB,KAApB,CAAd;;AAIA,kBAAO,KAAP;AACD;;AAEC;;;;;;;0BAGI,M,EAAQ;AACZ,UAAM,SAAS,IAAf;AACA,aAAO,MAAP,GAAgB,MAAhB;;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI;AACF,iBAAO,MAAP,CAAc,QAAd,GAAyB,GAAzB,CAA6B,OAAO,SAAP,EAA7B;AACA,iBAAO,MAAP,CAAc,QAAd,CAAuB,IAAvB,CAA4B,MAA5B;AACD,SAHD,CAGE,OAAO,GAAP,EAAY;AACZ,kBAAQ,KAAR,CAAc,IAAI,OAAlB;AACA;AACD,SAND,SAMU;AACR,cAAI,mBAAS,KAAb,EAAoB;AAClB,oBAAQ,KAAR,wBACuB,OAAO,KAD9B,2BAEE,CAAC,MAAD,EAAS,OAAO,MAAhB,CAFF;AAID;;AAED,kBAAQ,MAAR;AACD;AACF,OAjBM,CAAP;AAkBD;;AAED;;;;;;4BAGQ;AACN,aAAO,IAAI,MAAJ,CAAW,KAAK,QAAhB,EAA0B,IAA1B,CAA+B,IAA/B,CAAP;AACD;;AAED;;;;;;;;yBAKK,M,EAAQ;AACX,WAAK,SAAL,CAAe,OAAO,SAAP,GAAmB,KAAnB,EAAf;;AAEA,WAAK,KAAL,GAAa,OAAO,KAApB;;AAEA,aAAO,IAAP;AACD;;AAED;;;;;;;;6BAKS;AACP,WAAK,MAAL,CAAY,QAAZ,GAAuB,MAAvB,CAA8B,KAAK,SAAL,EAA9B;;AAEA,WAAK,MAAL,CAAY,QAAZ,CAAqB,MAArB,CAA4B,KAAK,MAAL,CAAY,QAAZ,CAAqB,OAArB,CAA6B,IAA7B,CAA5B,EAAgE,CAAhE;AACA,WAAK,MAAL,GAAc,IAAd;;AAEA,WAAK,IAAL,CAAU,QAAV;;AAEA,UAAI,mBAAS,KAAb,EAAoB;AAClB,gBAAQ,KAAR,yBACwB,KAAK,KAD7B,8BAEE,CAAC,MAAD,CAFF;AAID;;AAED,aAAO,IAAP;AACD;;;;;QAID,M,GAAA,M","file":"Points.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nimport {loadMaterial} from './api';\r\nimport {defaults} from '../utils/defaults';\r\nimport {WHSObject} from '../core/Object';\r\n\r\nclass Points extends WHSObject {\r\n  /**\r\n   * Create points.\r\n   *\r\n   * Todo\r\n   */\r\n  constructor(params) {\r\n    super({\r\n      geometry: false,\r\n\r\n      material: {\r\n        kind: 'points'\r\n      }\r\n    });\r\n\r\n    super.setParams(params);\r\n\r\n    const _verts = params.geometry.points;\r\n\r\n    const points = new THREE.Points(\r\n      params.geometry,\r\n      loadMaterial(params.material)\r\n    );\r\n\r\n    this.setNative(points);\r\n\r\n    const scope = Object.assign(this, {\r\n      _type: 'points'\r\n    });\r\n\r\n    return scope;\r\n  }\r\n\r\n    /**\r\n     * Add curve to scene.\r\n     */\r\n  addTo(parent) {\r\n    const _scope = this;\r\n    _scope.parent = parent;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        _scope.parent.getScene().add(_scope.getNative());\r\n        _scope.parent.children.push(_scope);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        reject();\r\n      } finally {\r\n        if (defaults.debug) {\r\n          console.debug(\r\n            `@WHS.Curve: Curve ${_scope._type} was added to world.`,\r\n            [_scope, _scope.parent]\r\n          );\r\n        }\r\n\r\n        resolve(_scope);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clone curve.\r\n   */\r\n  clone() {\r\n    return new Points(this.__params).copy(this);\r\n  }\r\n\r\n  /**\r\n   * Copy curve.\r\n   *\r\n   * @param {WHS.Points} source - Source object, that will be applied to this.\r\n   */\r\n  copy(source) {\r\n    this.setNative(source.getNative().clone());\r\n\r\n    this._type = source._type;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove this curve from world.\r\n   *\r\n   * @return {WHS.Points} - this.\r\n   */\r\n  remove() {\r\n    this.parent.getScene().remove(this.getNative());\r\n\r\n    this.parent.children.splice(this.parent.children.indexOf(this), 1);\r\n    this.parent = null;\r\n\r\n    this.emit('remove');\r\n\r\n    if (defaults.debug) {\r\n      console.debug(\r\n        `@WHS.Points: Curve ${this._type} was removed from world`,\r\n        [_scope]\r\n      );\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport {\r\n  Points\r\n};\r\n"]}