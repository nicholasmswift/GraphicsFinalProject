{"version":3,"sources":["extras/api.js"],"names":[],"mappings":"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","file":"api.js","sourcesContent":["import * as THREE from 'three';\r\nimport * as Physijs from '../physics/index.js';\r\n\r\nimport {JSONLoader, TextureLoader, FontLoader} from '../utils/loaders';\r\n\r\nconst extend = (object, ...extensions) => { // $.extend alternative, ... is the spread operator.\r\n  for (const extension of extensions) {\r\n    // console.log(extension);\r\n    // console.log(typeof extension);\r\n\r\n    if (!extension)\r\n      continue; // Ignore null and undefined objects and paramaters.\r\n\r\n    for (const prop of Object.getOwnPropertyNames(extension)) { // Do not traverse the prototype chain.\r\n      if (object[prop] !== undefined\r\n        && object[prop].toString() === '[object Object]'\r\n        && extension[prop].toString() === '[object Object]') {\r\n\r\n        // Goes deep only if object[prop] and extension[prop] are both objects !\r\n        if (extension[prop].uuid) object[prop] = extension[prop];\r\n        else extend(object[prop], extension[prop]);\r\n\r\n      } else\r\n        object[prop] = (object[prop] === 0) ? 0 : object[prop];\r\n      if (typeof object[prop] === 'undefined') object[prop] = extension[prop]; // Add values that do not already exist.\r\n    }\r\n  }\r\n\r\n  return object;\r\n};\r\n\r\nconst texture = (url, repeat = {}) => {\r\n  const texture = TextureLoader.load(url);\r\n\r\n  if (repeat) {\r\n    const opt = extend(repeat, {\r\n      offset: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      repeat: {\r\n        x: 1,\r\n        y: 1\r\n      }\r\n    });\r\n\r\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n\r\n    texture.offset.set(opt.offset.x, opt.offset.y);\r\n    texture.repeat.set(opt.repeat.x, opt.repeat.y);\r\n\r\n    texture.magFilter = THREE.NearestFilter;\r\n    texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n  }\r\n\r\n  return texture;\r\n};\r\n\r\nconst loadMaterial = (material = {}) => {\r\n  let materialThree;\r\n\r\n  const params = Object.assign({}, material);\r\n\r\n  delete params.kind;\r\n  delete params.useCustomMaterial;\r\n  delete params.useVertexColors;\r\n\r\n  switch (material.kind) {\r\n    case 'basic':\r\n      materialThree = new THREE.MeshBasicMaterial(params);\r\n      break;\r\n\r\n    case 'linebasic':\r\n      materialThree = new THREE.LineBasicMaterial(params);\r\n      break;\r\n\r\n    case 'linedashed':\r\n      materialThree = new THREE.LineDashedMaterial(params);\r\n      break;\r\n\r\n    case 'material':\r\n      materialThree = new THREE.Material(params);\r\n      break;\r\n\r\n    case 'depth':\r\n      materialThree = new THREE.MeshDepthMaterial(params);\r\n      break;\r\n\r\n    case 'face':\r\n      materialThree = new THREE.MeshFaceMaterial(params);\r\n      break;\r\n\r\n    case 'lambert':\r\n      materialThree = new THREE.MeshLambertMaterial(params);\r\n      break;\r\n\r\n    case 'normal':\r\n      materialThree = new THREE.MeshNormalMaterial(params);\r\n      break;\r\n\r\n    case 'phong':\r\n      materialThree = new THREE.MeshPhongMaterial(params);\r\n      break;\r\n\r\n    case 'points':\r\n      materialThree = new THREE.PointsMaterial(params);\r\n      break;\r\n\r\n    case 'standard':\r\n      materialThree = new THREE.MeshStandardMaterial(params);\r\n      break;\r\n\r\n    case 'pointcloud':\r\n      materialThree = new THREE.PointCloudMaterial(params);\r\n      break;\r\n\r\n    case 'rawshader':\r\n      materialThree = new THREE.RawShaderMaterial(params);\r\n      break;\r\n\r\n    case 'shader':\r\n      materialThree = new THREE.ShaderMaterial(params);\r\n      break;\r\n\r\n    case 'spritecanvas':\r\n      materialThree = new THREE.SpriteCanvasMaterial(params);\r\n      break;\r\n\r\n    case 'sprite':\r\n      materialThree = new THREE.SpriteMaterial(params);\r\n      break;\r\n\r\n    default:\r\n      materialThree = new THREE.MeshBasicMaterial(params);\r\n      break;\r\n  }\r\n\r\n  return materialThree;\r\n};\r\n\r\nexport {\r\n  FontLoader,\r\n  JSONLoader,\r\n  TextureLoader,\r\n  texture,\r\n  extend,\r\n  loadMaterial\r\n};\r\n"]}