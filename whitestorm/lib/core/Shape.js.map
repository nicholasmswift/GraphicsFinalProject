{"version":3,"sources":["core/Shape.js"],"names":[],"mappings":"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","file":"Shape.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nimport {loadMaterial, extend} from '../extras/api';\r\nimport {Loop} from '../extensions/Loop';\r\nimport {defaults} from '../utils/defaults';\r\nimport {World} from './World';\r\nimport {WHSObject} from './Object';\r\n\r\nclass Shape extends WHSObject {\r\n  /**\r\n   * Constructing WHS.Shape object.\r\n   *\r\n   * @param {Object} params - Inputed parameters.\r\n   * @param {String} type - Shape type.\r\n   * @return {WHS.Shape}\r\n   */\r\n  constructor(params = {}, type = 'mesh') {\r\n    const _set = (x, y, z) => {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n    };\r\n\r\n    const physicsDefaults = !!'physics' ? {\r\n      restitution: 0.3,\r\n      friction: 0.8,\r\n      damping: 0,\r\n      pressure: 100,\r\n      margin: 0,\r\n      klst: 0.9,\r\n      kvst: 0.9,\r\n      klst: 0.9\r\n    } : false;\r\n\r\n    super({\r\n      mass: 10,\r\n      build: true,\r\n      softbody: false,\r\n      geometry: {},\r\n\r\n      shadow: {\r\n        cast: true,\r\n        receive: true\r\n      },\r\n\r\n      material: {\r\n        kind: 'basic'\r\n      },\r\n\r\n      helpers: {\r\n        box: false,\r\n        boundingBox: false,\r\n        edges: false,\r\n        faceNormals: false\r\n      },\r\n\r\n      pos: {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n        set: _set\r\n      },\r\n\r\n      rot: {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n        set: _set\r\n      },\r\n\r\n      scale: {\r\n        x: 1,\r\n        y: 1,\r\n        z: 1,\r\n        set: _set\r\n      },\r\n\r\n      target: {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n        set: _set\r\n      },\r\n\r\n      physics: physicsDefaults\r\n    });\r\n\r\n    if (params instanceof THREE.Object3D) {\r\n      super.setParams({\r\n        pos: {x: params.position.x, y: params.position.y, z: params.position.z},\r\n        rot: {x: params.rotation.x, y: params.rotation.y, z: params.rotation.z},\r\n        scale: {x: params.scale.x, y: params.scale.y, z: params.scale.z},\r\n        mass: params.mass,\r\n        physics: Boolean(params._physijs)\r\n      });\r\n    } else super.setParams(params);\r\n\r\n    const scope = Object.assign(this,\r\n      {\r\n        _type: type,\r\n        __c_rot: false,\r\n\r\n        _wait: [],\r\n\r\n        helpers: {\r\n          box: false,\r\n          boundingBox: false,\r\n          edges: false,\r\n          faceNormals: false\r\n        },\r\n\r\n        physics: params.physics\r\n      }\r\n    );\r\n\r\n    if (params instanceof THREE.Object3D) this.setNative(params);\r\n    if (defaults.debug) console.debug(`@WHS.Shape: Shape ${scope._type} found.`, scope);\r\n\r\n    return scope;\r\n  }\r\n\r\n  wait(promise) {\r\n    this._wait.push(promise);\r\n  }\r\n\r\n  /**\r\n   * Applying shadow & position & rotation.\r\n   *\r\n   * @param {...String} tags - Tags that defines what to do with shape\r\n   * additionally.\r\n   */\r\n  wrap(...tags) {\r\n    if (this._wait.length) {\r\n      return new Promise((resolve, reject) => {\r\n        Promise.all(this._wait).then(() => {\r\n          const _native = this.getNative(),\r\n            _params = this.getParams(),\r\n            _params_helpers = _params.helpers;\r\n\r\n          if (!_native) reject();\r\n\r\n          if (tags.indexOf('no-shadows') < 0) {\r\n            _native.castShadow = _params.shadow.cast;\r\n            _native.receiveShadow = _params.shadow.receive;\r\n          }\r\n\r\n          if (tags.indexOf('no-transforms') < 0) {\r\n            if (!_params.softbody) {\r\n              const _params_pos = _params.pos,\r\n                _params_rot = _params.rot,\r\n                _params_scale = _params.scale;\r\n\r\n              this.position.set(\r\n                _params_pos.x,\r\n                _params_pos.y,\r\n                _params_pos.z\r\n              );\r\n\r\n              this.rotation.set(\r\n                _params_rot.x,\r\n                _params_rot.y,\r\n                _params_rot.z\r\n              );\r\n\r\n              this.scale.set(\r\n                _params_scale.x,\r\n                _params_scale.y,\r\n                _params_scale.z\r\n              );\r\n            }\r\n          }\r\n\r\n          // Box helper.\r\n          if (_params_helpers.box) {\r\n            this.helpers.box = new THREE.BoxHelper(\r\n              _native\r\n            );\r\n          }\r\n\r\n          // Bounding box helper.\r\n          if (_params_helpers.boundingBox) {\r\n            extend(_params_helpers.boundingBox, {\r\n              color: 0xffffff\r\n            });\r\n\r\n            this.helpers.boundingBox = new THREE.BoundingBoxHelper(\r\n              _native,\r\n              _params_helpers.boundingBox.color\r\n              ? _params_helpers.boundingBox.color\r\n              : 0xffffff\r\n            );\r\n          }\r\n\r\n          // Edges helper.\r\n          if (_params_helpers.edges) {\r\n            extend(_params_helpers.edges, {\r\n              color: 0xffffff\r\n            });\r\n\r\n            this.helpers.edges = new THREE.EdgesHelper(\r\n              _native,\r\n              _params_helpers.edges.color\r\n            );\r\n          }\r\n\r\n          // faceNormals helper.\r\n          if (_params_helpers.faceNormals) {\r\n            const _params_helpers_faceNormals = _params_helpers.faceNormals;\r\n\r\n            extend(_params_helpers_faceNormals, {\r\n              size: 2,\r\n              color: 0xffffff,\r\n              linewidth: 1\r\n            });\r\n\r\n            this.helpers.faceNormals = new THREE.FaceNormalsHelper(\r\n              _native,\r\n              _params_helpers_faceNormals.size,\r\n              _params_helpers_faceNormals.color,\r\n              _params_helpers_faceNormals.linewidth\r\n            );\r\n          }\r\n\r\n          // vertexNormals helper.\r\n          if (_params_helpers.vertexNormals) {\r\n            const _params_helpers_vertexNormals = _params_helpers.vertexNormals;\r\n\r\n            extend(_params_helpers_vertexNormals, {\r\n              size: 2,\r\n              color: 0xffffff,\r\n              linewidth: 1\r\n            });\r\n\r\n            this.helpers.vertexNormals = new THREE.VertexNormalsHelper(\r\n              _native,\r\n              _params_helpers_vertexNormals.size,\r\n              _params_helpers_vertexNormals.color,\r\n              _params_helpers_vertexNormals.linewidth\r\n            );\r\n          }\r\n\r\n          resolve(this);\r\n\r\n          if (WHS.debug) console.debug(`@WHS.Shape: Shape ${this._type} is ready.`, this);\r\n        });\r\n      });\r\n    } else {\r\n      return new Promise((resolve, reject) => {\r\n        const _native = this.getNative(),\r\n          _params = this.getParams(),\r\n          _params_helpers = _params.helpers;\r\n\r\n        if (!_native) reject();\r\n\r\n        if (tags.indexOf('no-shadows') < 0) {\r\n          _native.castShadow = _params.shadow.cast;\r\n          _native.receiveShadow = _params.shadow.receive;\r\n        }\r\n\r\n        if (tags.indexOf('no-transforms') < 0) {\r\n          if (!_params.softbody) {\r\n            const _params_pos = _params.pos,\r\n              _params_rot = _params.rot,\r\n              _params_scale = _params.scale;\r\n\r\n            this.position.set(\r\n              _params_pos.x,\r\n              _params_pos.y,\r\n              _params_pos.z\r\n            );\r\n\r\n            this.rotation.set(\r\n              _params_rot.x,\r\n              _params_rot.y,\r\n              _params_rot.z\r\n            );\r\n\r\n            this.scale.set(\r\n              _params_scale.x,\r\n              _params_scale.y,\r\n              _params_scale.z\r\n            );\r\n          }\r\n        }\r\n\r\n        // Box helper.\r\n        if (_params_helpers.box) {\r\n          this.helpers.box = new THREE.BoxHelper(\r\n            _native\r\n          );\r\n        }\r\n\r\n        // Bounding box helper.\r\n        if (_params_helpers.boundingBox) {\r\n          extend(_params_helpers.boundingBox, {\r\n            color: 0xffffff\r\n          });\r\n\r\n          this.helpers.boundingBox = new THREE.BoundingBoxHelper(\r\n            _native,\r\n            _params_helpers.boundingBox.color\r\n            ? _params_helpers.boundingBox.color\r\n            : 0xffffff\r\n          );\r\n        }\r\n\r\n        // Edges helper.\r\n        if (_params_helpers.edges) {\r\n          extend(_params_helpers.edges, {\r\n            color: 0xffffff\r\n          });\r\n\r\n          this.helpers.edges = new THREE.EdgesHelper(\r\n            _native,\r\n            _params_helpers.edges.color\r\n          );\r\n        }\r\n\r\n        // faceNormals helper.\r\n        if (_params_helpers.faceNormals) {\r\n          const _params_helpers_faceNormals = _params_helpers.faceNormals;\r\n\r\n          extend(_params_helpers_faceNormals, {\r\n            size: 2,\r\n            color: 0xffffff,\r\n            linewidth: 1\r\n          });\r\n\r\n          this.helpers.faceNormals = new THREE.FaceNormalsHelper(\r\n            _native,\r\n            _params_helpers_faceNormals.size,\r\n            _params_helpers_faceNormals.color,\r\n            _params_helpers_faceNormals.linewidth\r\n          );\r\n        }\r\n\r\n        // vertexNormals helper.\r\n        if (_params_helpers.vertexNormals) {\r\n          const _params_helpers_vertexNormals = _params_helpers.vertexNormals;\r\n\r\n          extend(_params_helpers_vertexNormals, {\r\n            size: 2,\r\n            color: 0xffffff,\r\n            linewidth: 1\r\n          });\r\n\r\n          this.helpers.vertexNormals = new THREE.VertexNormalsHelper(\r\n            _native,\r\n            _params_helpers_vertexNormals.size,\r\n            _params_helpers_vertexNormals.color,\r\n            _params_helpers_vertexNormals.linewidth\r\n          );\r\n        }\r\n\r\n        resolve(this);\r\n\r\n        if (WHS.debug) console.debug(`@WHS.Shape: Shape ${this._type} is ready.`, this);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add shape to WHS.World object.\r\n   *\r\n   * @param {WHS.World} parent - World, were this shape will be.\r\n   * @param {...String} tags - Tags for compiling.\r\n   */\r\n  addTo(parent) {\r\n    const _helpers = this.helpers;\r\n    this.parent = parent;\r\n\r\n    if (this._wait.length) {\r\n      return new Promise((resolve, reject) => {\r\n        Promise.all(this._wait).then(() => {\r\n          const _native = this.getNative(),\r\n            _params = this.getParams(),\r\n            _params_helpers = _params.helpers,\r\n            _parent = this.parent;\r\n\r\n          if (!_native) reject();\r\n\r\n          const parentNative = _parent instanceof World ? _parent.getScene()\r\n            : _parent.getNative();\r\n\r\n          parentNative.add(_native);\r\n          this.parent.children.push(this);\r\n\r\n          if (_params.softbody) {\r\n            _native.position.set(0, 0, 0);\r\n            _native.rotation.set(0, 0, 0);\r\n          }\r\n\r\n          if (_params_helpers.box) parentNative.add(_helpers.box);\r\n          if (_params_helpers.boundingBox) parentNative.add(_helpers.boundingBox);\r\n          if (_params_helpers.edges) parentNative.add(_helpers.edges);\r\n          if (_params_helpers.faceNormals) parentNative.add(_helpers.faceNormals);\r\n          if (_params_helpers.vertexNormals) parentNative.add(_helpers.vertexNormals);\r\n\r\n          resolve(this);\r\n\r\n          _native.addEventListener('collision', () => {\r\n            this.emit('collide');\r\n          });\r\n\r\n          if (WHS.debug) {\r\n            console.debug(\r\n              `@WHS.Shape: Shape ${this._type} was added to world.`,\r\n              [this, _parent]\r\n            );\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      return new Promise((resolve, reject) => {\r\n        const _native = this.getNative(),\r\n          _params = this.getParams(),\r\n          _params_helpers = _params.helpers,\r\n          _parent = this.parent;\r\n\r\n        if (!_native) reject();\r\n\r\n        const parentNative = _parent instanceof World ? _parent.getScene()\r\n          : _parent.getNative();\r\n\r\n        parentNative.add(_native);\r\n        this.parent.children.push(this);\r\n\r\n        if (_params.softbody) {\r\n          _native.position.set(0, 0, 0);\r\n          _native.rotation.set(0, 0, 0);\r\n        }\r\n\r\n        if (_params_helpers.box) parentNative.add(_helpers.box);\r\n        if (_params_helpers.boundingBox) parentNative.add(_helpers.boundingBox);\r\n        if (_params_helpers.edges) parentNative.add(_helpers.edges);\r\n        if (_params_helpers.faceNormals) parentNative.add(_helpers.faceNormals);\r\n        if (_params_helpers.vertexNormals) parentNative.add(_helpers.vertexNormals);\r\n\r\n        resolve(this);\r\n\r\n        _native.addEventListener('collision', () => {\r\n          this.emit('collide');\r\n        });\r\n\r\n        if (WHS.debug) {\r\n          console.debug(\r\n            `@WHS.Shape: Shape ${this._type} was added to world.`,\r\n            [this, _parent]\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone shape.\r\n   */\r\n  clone() {\r\n    return new WHS.Shape(this.getParams(), this._type).copy(this);\r\n  }\r\n\r\n  /**\r\n   * Copy shape.\r\n   *\r\n   * @param {WHS.Shape} source - Source object, that will be applied to this.\r\n   */\r\n  copy(source) {\r\n    const sourceNative = source.getNative();\r\n\r\n    if (source.getParams().softbody)\r\n      this.setNative(new sourceNative.constructor(sourceNative.tempGeometry.clone(), sourceNative.material, source.getParams()));\r\n    else this.setNative(sourceNative.clone(source.getParams()));\r\n\r\n    this.setParams(source.getParams());\r\n\r\n    this.wrap();\r\n\r\n    this.position.copy(source.position);\r\n    this.rotation.copy(source.rotation);\r\n    this.quaternion.copy(source.quaternion);\r\n\r\n    this.getNative().mass = source.getNative().mass;\r\n\r\n    return this;\r\n  }\r\n\r\n  getParent() {\r\n    return this.parent;\r\n  }\r\n\r\n  /**\r\n   * @return {WHS.World} - World object.\r\n   */\r\n  getWorld() {\r\n    let p = this.parent;\r\n\r\n    while (!(p instanceof World)) {\r\n      if (p) p = p.parent;\r\n      else return false;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  get position() {\r\n    return this.getNative().position;\r\n  }\r\n\r\n  set position(vector3) {\r\n    const pos = this.getNative().position,\r\n      native = this.getNative();\r\n\r\n    Object.defineProperties(pos, {\r\n      x: {\r\n        get() {\r\n          return this._x;\r\n        },\r\n\r\n        set(x) {\r\n          native.__dirtyPosition = true;\r\n          this._x = x;\r\n        }\r\n      },\r\n      y: {\r\n        get() {\r\n          return this._y;\r\n        },\r\n\r\n        set(y) {\r\n          native.__dirtyPosition = true;\r\n          this._y = y;\r\n        }\r\n      },\r\n      z: {\r\n        get() {\r\n          return this._z;\r\n        },\r\n\r\n        set(z) {\r\n          native.__dirtyPosition = true;\r\n          this._z = z;\r\n        }\r\n      }\r\n    });\r\n\r\n    native.__dirtyPosition = true;\r\n\r\n    return pos.copy(vector3);\r\n  }\r\n\r\n  get quaternion() {\r\n    this.__c_rot = true;\r\n    return this.getNative().quaternion;\r\n  }\r\n\r\n  set quaternion(quaternion) {\r\n    const quat = this.getNative().quaternion,\r\n      native = this.getNative();\r\n\r\n    quat.copy(quaternion);\r\n\r\n    quat.onChange(() => {\r\n      if (this.__c_rot) {\r\n        if (native.__dirtyRotation === true) {\r\n          this.__c_rot = false;\r\n          native.__dirtyRotation = false;\r\n        }\r\n        native.__dirtyRotation = true;\r\n      }\r\n    });\r\n\r\n    return quat;\r\n  }\r\n\r\n  get rotation() {\r\n    this.__c_rot = true;\r\n    return this.getNative().rotation;\r\n  }\r\n\r\n  set rotation(euler) {\r\n    const rot = this.getNative().rotation,\r\n      native = this.getNative();\r\n\r\n    rot.copy(euler);\r\n\r\n    rot.onChange(() => {\r\n      if (this.__c_rot) {\r\n        this.quaternion.copy(new THREE.Quaternion().setFromEuler(rot));\r\n        native.__dirtyRotation = true;\r\n      }\r\n    });\r\n\r\n    return rot;\r\n  }\r\n\r\n  get scale() {\r\n    return this.getNative().scale;\r\n  }\r\n\r\n  set scale(vector3) {\r\n    this.getNative().scale = vector3;\r\n    return this.getNative().scale;\r\n  }\r\n\r\n  G_(params = {}) {\r\n    if (this.buildGeometry) {\r\n      this.getNative().geometry = this.buildGeometry(\r\n        this.updateParams({geometry: params})\r\n      );\r\n    }\r\n  }\r\n\r\n  M_(params = {}) {\r\n    this.getNative().material = loadMaterial(\r\n      this.updateParams({material: params}).material\r\n    );\r\n  }\r\n\r\n  set M_color(val) {\r\n    this.updateParams({material: {color: val}});\r\n    this.getNative().material.color = new THREE.Color(val);\r\n  }\r\n\r\n  get M_color() {\r\n    return this.getNative().material.color;\r\n  }\r\n\r\n  proccessSoftbodyGeometry(geometry) {\r\n    geometry.rotateX(this.__params.rot.x);\r\n    geometry.rotateY(this.__params.rot.y);\r\n    geometry.rotateZ(this.__params.rot.z);\r\n\r\n    geometry.scale(\r\n      this.__params.scale.x,\r\n      this.__params.scale.y,\r\n      this.__params.scale.z\r\n    );\r\n\r\n    geometry.translate(\r\n      this.__params.pos.x,\r\n      this.__params.pos.y,\r\n      this.__params.pos.z\r\n    );\r\n  }\r\n\r\n  /* Access private data */\r\n\r\n  setNative(native) {\r\n    this._native = native;\r\n\r\n    this.position = native.position.clone();\r\n    this.quaternion = native.quaternion.clone();\r\n    this.rotation = native.rotation.clone();\r\n  }\r\n\r\n  setMaterial(material) {\r\n    this._native.material = material;\r\n    return this._native.material;\r\n  }\r\n\r\n  /* Physics */\r\n\r\n  setAngularVelocity(...args) {\r\n    return this.getNative().setAngularVelocity(...args);\r\n  }\r\n\r\n  setLinearVelocity(...args) {\r\n    return this.getNative().setLinearVelocity(...args);\r\n  }\r\n\r\n  applyCentralImpulse(...args) {\r\n    return this.getNative().applyCentralImpulse(...args);\r\n  }\r\n\r\n  applyImpulse(...args) {\r\n    return this.getNative().applyImpulse(...args);\r\n  }\r\n\r\n  applyTorque(...args) {\r\n    return this.getNative().applyTorque(...args);\r\n  }\r\n\r\n  applyCentralForce(...args) {\r\n    return this.getNative().applyCentralForce(...args);\r\n  }\r\n\r\n  applyForce(...args) {\r\n    return this.getNative().applyForce(...args);\r\n  }\r\n\r\n  getAngularVelocity(...args) {\r\n    return this.getNative().getAngularVelocity(...args);\r\n  }\r\n\r\n  getLinearVelocity(...args) {\r\n    return this.getNative().getLinearVelocity(...args);\r\n  }\r\n\r\n  setAngularFactor(...args) {\r\n    return this.getNative().setAngularFactor(...args);\r\n  }\r\n\r\n  setLinearFactor(...args) {\r\n    return this.getNative().setLinearFactor(...args);\r\n  }\r\n\r\n  setDamping(...args) {\r\n    return this.getNative().setDamping(...args);\r\n  }\r\n\r\n  setCcdMotionThreshold(...args) {\r\n    return this.getNative().setCcdMotionThreshold(...args);\r\n  }\r\n\r\n  setCcdSweptSphereRadius(...args) {\r\n    return this.getNative().setCcdSweptSphereRadius(...args);\r\n  }\r\n\r\n  appendAnchor(world, object, node, influence, collisionBetweenLinkedBodies = true) {\r\n    return this.getNative().appendAnchor(world.getScene(), object.getNative(), node, influence, collisionBetweenLinkedBodies);\r\n  }\r\n\r\n  /* Three.js */\r\n\r\n  raycast(...args) {\r\n    return this.getNative().lookAt(...args);\r\n  }\r\n\r\n  /* API */\r\n\r\n  follow(curve, time = 1000, loop) {\r\n    const gEnd = time;\r\n\r\n    let animation = new Loop(clock => {\r\n      const u = clock.getElapsedTime() * 1000 / gEnd,\r\n        vec1 = curve.getPoint(u % 1),\r\n        vec2 = curve.getPoint((u + 0.01) % 1);\r\n\r\n      this.position.set(vec1.x, vec1.y, vec1.z);\r\n      this.getNative().lookAt(vec2);\r\n    });\r\n\r\n    this.getWorld().addLoop(animation);\r\n\r\n    animation.start();\r\n\r\n    if (loop) {\r\n      setInterval(() => {\r\n        animation.stop();\r\n\r\n        animation = new Loop(clock => {\r\n          const u = clock.getElapsedTime() * 1000 / gEnd,\r\n            vec1 = curve.getPoint(u % 1),\r\n            vec2 = curve.getPoint((u + 0.01) % 1);\r\n\r\n          this.position.set(vec1.x, vec1.y, vec1.z);\r\n          this.getNative().lookAt(vec2);\r\n        });\r\n\r\n        this.getWorld().addLoop(animation);\r\n\r\n        animation.start();\r\n      }, time);\r\n    } else {\r\n      setTimeout(() => {\r\n        animation.stop();\r\n        this.getWorld().removeLoop(animation);\r\n      }, time);\r\n    }\r\n  }\r\n\r\n  /* VISIBILITY */\r\n  show() {\r\n    this.getNative().visible = true;\r\n  }\r\n\r\n  hide() {\r\n    this.getNative().visible = false;\r\n  }\r\n}\r\n\r\nexport {\r\n  Shape\r\n};\r\n"]}