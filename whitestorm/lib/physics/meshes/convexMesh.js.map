{"version":3,"sources":["physics/meshes/convexMesh.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;IAEa,U,WAAA,U;;;AACX,wBAAY,IAAZ,EAAkB,QAAlB,EAAoD;AAAA,YAAxB,MAAwB,yDAAf,EAAe;AAAA,YAAX,SAAW;AAAA;;AAClD,YAAM,aAAa,OAAO,OAA1B;AACA,YAAM,OAAO,WAAW,IAAX,IAAmB,OAAO,IAAvC;;AAFkD,gHAG5C,IAH4C,EAGtC,QAHsC,EAG5B,IAH4B;;AAKlD,YAAI,CAAC,KAAK,WAAV,EAAuB,KAAK,kBAAL;;AAEvB,YAAM,WAAW,YAAY,SAAZ,GAAwB,IAAzC;AAAA,YACE,OAAO,IAAI,YAAJ,CAAiB,SAAS,QAAT,CAAkB,MAAlB,GAA2B,CAA5C,CADT;;AAGA,YAAM,SAAS,OAAO,KAAP,IAAgB,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAa,GAAG,CAAhB,EAA/B;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,QAAT,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,iBAAK,IAAI,CAAT,IAAc,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,GAAyB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,GAAyB,OAAO,CAAlD;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,GAAyB,OAAO,CAAlD;AACD;;AAED,YAAM,QAAQ,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAArB,GAAyB,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAA5D;AACA,YAAM,SAAS,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAArB,GAAyB,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAA7D;AACA,YAAM,QAAQ,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAArB,GAAyB,KAAK,WAAL,CAAiB,GAAjB,CAAqB,CAA5D;;AAEA,cAAK,QAAL,CAAc,IAAd,GAAqB,QAArB;AACA,cAAK,QAAL,CAAc,IAAd,GAAqB,IAArB;AACA,cAAK,QAAL,CAAc,IAAd,GAAqB,IAArB;;AAEA,cAAK,QAAL,CAAc,MAAd,GAAuB;AACrB,sBAAU,WAAW,QADA;AAErB,yBAAa,WAAW,WAFH;AAGrB,qBAAS,WAAW,OAHC;AAIrB,oBAAQ,WAAW;AAJE,SAAvB;AA7BkD;AAmCnD","file":"convexMesh.js","sourcesContent":["import {Mesh} from '../core/mesh';\r\n\r\nexport class ConvexMesh extends Mesh {\r\n  constructor(geom, material, params = {}, cGeometry) {\r\n    const physParams = params.physics;\r\n    const mass = physParams.mass || params.mass;\r\n    super(geom, material, mass);\r\n\r\n    if (!geom.boundingBox) geom.computeBoundingBox();\r\n    \r\n    const geometry = cGeometry ? cGeometry : geom,\r\n      data = new Float32Array(geometry.vertices.length * 3);\r\n\r\n    const cScale = params.scale || {x: 1, y: 1, z: 1};\r\n    cScale.x = cScale.x || 1;\r\n    cScale.y = cScale.y || 1;\r\n    cScale.z = cScale.z || 1;\r\n\r\n    for (let i = 0; i < geometry.vertices.length; i++) {\r\n      data[i * 3] = geometry.vertices[i].x * cScale.x;\r\n      data[i * 3 + 1] = geometry.vertices[i].y * cScale.y;\r\n      data[i * 3 + 2] = geometry.vertices[i].z * cScale.z;\r\n    }\r\n\r\n    const width = geom.boundingBox.max.x - geom.boundingBox.min.x;\r\n    const height = geom.boundingBox.max.y - geom.boundingBox.min.y;\r\n    const depth = geom.boundingBox.max.z - geom.boundingBox.min.z;\r\n\r\n    this._physijs.type = 'convex';\r\n    this._physijs.data = data;\r\n    this._physijs.mass = mass;\r\n\r\n    this._physijs.params = {\r\n      friction: physParams.friction,\r\n      restitution: physParams.restitution,\r\n      damping: physParams.damping,\r\n      margin: physParams.margin\r\n    };\r\n  }\r\n}\r\n"]}