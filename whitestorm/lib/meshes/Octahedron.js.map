{"version":3,"sources":["meshes/Octahedron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;AAEA;;AACA;;;;;;IAEM,U;;;AACJ,wBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,4GACjB,MADiB,EACT,YADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,cAAQ;AAFc,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,WAAW,uBAAa,OAAO,QAApB,CAAjB;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,GAAiB,QAArC,EAA+C,uBAA/C,KACK,IAAI,KAAK,OAAT,EAAkB,yBAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,IAAJ,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,CAAf;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,wBAA1C,GAAqE,MAAM,kBAA9F;;AAEA,aAAO,IAAI,UAAJ,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,MAFX,CAAP;AAID;;;4BAkBO;AACN,aAAO,IAAI,UAAJ,CAAe,EAAC,OAAO,KAAR,EAAf,EAA+B,IAA/B,CAAoC,IAApC,CAAP;AACD;;;sBAlBY,G,EAAK;AAChB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEc;AACb,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,MAAxC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEc;AACb,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,MAAxC;AACD;;;;;QAQD,U,GAAA,U","file":"Octahedron.js","sourcesContent":["import * as THREE from 'three';\r\nimport {ConvexMesh, SoftMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Octahedron extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'octahedron');\r\n\r\n    extend(params.geometry, {\r\n      radius: 1,\r\n      detail: 0\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = SoftMesh;\r\n    else if (this.physics) Mesh = ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.OctahedronBufferGeometry : THREE.OctahedronGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.radius,\r\n      params.geometry.detail\r\n    );\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this._native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_detail(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {detail: val}}));\r\n  }\r\n\r\n  get G_detail() {\r\n    return this._native.geometry.parameters.detail;\r\n  }\r\n\r\n  clone() {\r\n    return new Octahedron({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Octahedron\r\n};\r\n"]}