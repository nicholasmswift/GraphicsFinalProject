{"version":3,"sources":["meshes/Model.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;AAEA;;AACA;;;;;;IAEM,K;;;AACJ,mBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,uGACjB,MADiB,EACT,OADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,YAAM,EADgB;AAEtB,eAAS,EAFa;AAGtB;AAHsB,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,4FAAW,MAAX;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,IAAb,KAAsB,SAA1C,EAAqD,0BAArD,KACK,IAAI,KAAK,OAAT,EAAkB,yBAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,UAAM,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACvC,YAAM,YAAY,OAAO,QAAzB;AACA,YAAM,SAAS,UAAU,MAAzB;;AAEA,eAAO,IAAP,CAAY,UAAU,IAAtB,EAA4B,UAAC,IAAD,EAAO,SAAP,EAAqB;AAC/C,cAAI,UAAU,OAAd,EAAuB;AACrB,mBAAO,IAAP,CAAY,UAAU,OAAtB,EAA+B,iBAAS;AACtC,kBAAI,iBAAJ;;AAEA,kBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,2BAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,gCAAc,IADQ;AAEtB,gCAAc,MAAM;AAFE,iBAAxB,CADS,CAAX;AAMD,eAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,2BAAW,uBAAa,OAAO,QAApB,CAAX;AACD,eAFM,MAEA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,mBAAK,kBAAL;AACA,mBAAK,oBAAL;;AAEA,qBAAK,SAAL,CAAe,IAAI,IAAJ,CACb,IADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,EAIb,KAJa,CAAf;;AAOA;AACD,aAzBD;AA0BD,WA3BD,MA2BO;AACL,gBAAI,iBAAJ;;AAEA,gBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,yBAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,8BAAc,IADQ;AAEtB,8BAAc,MAAM;AAFE,eAAxB,CADS,CAAX;AAMD,aAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,yBAAW,uBAAa,OAAO,QAApB,CAAX;AACD,aAFM,MAEA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,iBAAK,kBAAL;AACA,iBAAK,oBAAL;;AAEA,oBAAQ,GAAR,CAAY,OAAK,SAAL,EAAZ;;AAEA,mBAAK,SAAL,CAAe,IAAI,IAAJ,CACb,IADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,CAAf;;AAMA;AACD;AACF,SAvDD;AAwDD,OA5De,CAAhB;;AA8DA,0FAAW,OAAX;;AAEA,aAAO,OAAP;AACD;;;4BAEO;AACN,aAAO,IAAI,KAAJ,CAAU,EAAC,OAAO,KAAR,EAAV,EAA0B,IAA1B,CAA+B,IAA/B,CAAP;AACD;;;;;QAID,K,GAAA,K","file":"Model.js","sourcesContent":["import * as THREE from 'three';\r\nimport {ConvexMesh, ConcaveMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial, JSONLoader} from '../extras/api';\r\n\r\nclass Model extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'model');\r\n\r\n    extend(params.geometry, {\r\n      path: '',\r\n      physics: '',\r\n      loader: JSONLoader\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap('wait');\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    let Mesh;\r\n\r\n    if (this.physics && this.physics.type === 'concave') Mesh = ConcaveMesh;\r\n    else if (this.physics) Mesh = ConvexMesh;\r\n    else Mesh = THREE.Mesh\r\n\r\n    const promise = new Promise((resolve) => {\r\n      const pGeometry = params.geometry;\r\n      const Loader = pGeometry.loader\r\n\r\n      Loader.load(pGeometry.path, (data, materials) => {\r\n        if (pGeometry.physics) {\r\n          Loader.load(pGeometry.physics, data2 => {\r\n            let material;\r\n\r\n            if (params.material.useVertexColors) {\r\n              material = loadMaterial(\r\n                extend(params.material, {\r\n                  morphTargets: true,\r\n                  vertexColors: THREE.FaceColors\r\n                })\r\n              );\r\n            } else if (!materials || params.material.useCustomMaterial) {\r\n              material = loadMaterial(params.material);\r\n            } else material = new THREE.MultiMaterial(materials);\r\n\r\n            data.computeFaceNormals();\r\n            data.computeVertexNormals();\r\n\r\n            this.setNative(new Mesh(\r\n              data,\r\n              material,\r\n              this.getParams(),\r\n              data2\r\n            ));\r\n\r\n            resolve();\r\n          });\r\n        } else {\r\n          let material;\r\n\r\n          if (params.material.useVertexColors) {\r\n            material = loadMaterial(\r\n              extend(params.material, {\r\n                morphTargets: true,\r\n                vertexColors: THREE.FaceColors\r\n              })\r\n            );\r\n          } else if (!materials || params.material.useCustomMaterial) {\r\n            material = loadMaterial(params.material);\r\n          } else material = new THREE.MultiMaterial(materials);\r\n\r\n          data.computeFaceNormals();\r\n          data.computeVertexNormals();\r\n\r\n          console.log(this.getParams());\r\n\r\n          this.setNative(new Mesh(\r\n            data,\r\n            material,\r\n            this.getParams()\r\n          ));\r\n\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n\r\n    super.wait(promise);\r\n\r\n    return promise;\r\n  }\r\n\r\n  clone() {\r\n    return new Model({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Model\r\n};\r\n"]}