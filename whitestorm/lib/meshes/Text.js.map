{"version":3,"sources":["meshes/Text.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;AAEA;;AACA;;;;;;IAEM,I;;;AACJ,kBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,sGACjB,MADiB,EACT,MADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,YAAM,cADgB;;AAGtB,kBAAY;AACV,cAAM,EADI;AAEV,gBAAQ,EAFE;AAGV,uBAAe,EAHL;AAIV,cAAM,IAAI,MAAM,IAAV,EAJI;AAKV,sBAAc,KALJ;AAMV,wBAAgB,EANN;AAOV,mBAAW;AAPD;AAHU,KAAxB;;AAcA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,2FAAW,MAAX;AACD;AApBsB;AAqBxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,WAAW,uBAAa,OAAO,QAApB,CAAjB;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,GAAiB,QAArC,EAA+C,uBAA/C,KACK,IAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,IAAb,KAAsB,SAA1C,EAAqD,0BAArD,KACA,IAAI,KAAK,OAAT,EAAkB,yBAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,UAAM,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACvC,wBAAW,IAAX,CAAgB,OAAO,QAAP,CAAgB,UAAhB,CAA2B,IAA3C,EAAiD,gBAAQ;AACvD,iBAAO,QAAP,CAAgB,UAAhB,CAA2B,IAA3B,GAAkC,IAAlC;;AAEA,iBAAK,SAAL,CAAe,IAAI,IAAJ,CACb,IAAI,MAAM,YAAV,CACE,OAAO,QAAP,CAAgB,IADlB,EAEE,OAAO,QAAP,CAAgB,UAFlB,CADa,EAMb,QANa,EAOb,OAAK,SAAL,EAPa,CAAf;;AAUA;AACD,SAdD;AAeD,OAhBe,CAAhB;;AAkBA,yFAAW,OAAX;;AAEA,aAAO,OAAP;AACD;;;4BAEO;AACN,aAAO,IAAI,IAAJ,CAAS,EAAC,OAAO,KAAR,EAAT,EAAyB,IAAzB,CAA8B,IAA9B,CAAP;AACD;;;;;QAID,I,GAAA,I","file":"Text.js","sourcesContent":["import * as THREE from 'three';\r\nimport {ConvexMesh, ConcaveMesh, SoftMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial, FontLoader} from '../extras/api';\r\n\r\nclass Text extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'text');\r\n\r\n    extend(params.geometry, {\r\n      text: 'Hello World!',\r\n\r\n      parameters: {\r\n        size: 12,\r\n        height: 50,\r\n        curveSegments: 12,\r\n        font: new THREE.Font(),\r\n        bevelEnabled: false,\r\n        bevelThickness: 10,\r\n        bevelSize: 8\r\n      }\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap('wait');\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = SoftMesh;\r\n    else if (this.physics && this.physics.type === 'concave') Mesh = ConcaveMesh;\r\n    else if (this.physics) Mesh = ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    const promise = new Promise((resolve) => {\r\n      FontLoader.load(params.geometry.parameters.font, font => {\r\n        params.geometry.parameters.font = font;\r\n\r\n        this.setNative(new Mesh(\r\n          new THREE.TextGeometry(\r\n            params.geometry.text,\r\n            params.geometry.parameters\r\n          ),\r\n\r\n          material,\r\n          this.getParams()\r\n        ));\r\n\r\n        resolve();\r\n      });\r\n    });\r\n\r\n    super.wait(promise);\r\n\r\n    return promise;\r\n  }\r\n\r\n  clone() {\r\n    return new Text({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Text\r\n};\r\n"]}