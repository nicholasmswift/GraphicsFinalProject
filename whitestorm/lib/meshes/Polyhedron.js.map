{"version":3,"sources":["meshes/Polyhedron.js"],"names":[],"mappings":"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","file":"Polyhedron.js","sourcesContent":["import * as THREE from 'three';\r\nimport {ConvexMesh, SoftMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Polyhedron extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'polyhedron');\r\n\r\n    extend(params.geometry, {\r\n      verticesOfCube: this.verticesOfCube,\r\n      indicesOfFaces: this.indicesOfFaces,\r\n      radius: 6,\r\n      detail: 2\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = SoftMesh;\r\n    else if (this.physics) Mesh = ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  get verticesOfCube() {\r\n    return [\r\n      -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1,\r\n      -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1\r\n    ];\r\n  }\r\n\r\n  get indicesOfFaces() {\r\n    return [\r\n      2, 1, 0, 0, 3, 2,\r\n      0, 4, 7, 7, 3, 0,\r\n      0, 1, 5, 5, 4, 0,\r\n      1, 2, 6, 6, 5, 1,\r\n      2, 3, 7, 7, 6, 2,\r\n      4, 5, 6, 6, 7, 4\r\n    ];\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.PolyhedronBufferGeometry : THREE.PolyhedronGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.verticesOfCube,\r\n      params.geometry.indicesOfFaces,\r\n      params.geometry.radius,\r\n      params.geometry.detail\r\n    );\r\n  }\r\n\r\n  set G_verticesOfCube(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {verticesOfCube: val}}));\r\n  }\r\n\r\n  get G_verticesOfCube() {\r\n    return this._native.geometry.parameters.verticesOfCube;\r\n  }\r\n\r\n  set G_indicesOfFaces(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {indicesOfFaces: val}}));\r\n  }\r\n\r\n  get G_indicesOfFaces() {\r\n    return this._native.geometry.parameters.indicesOfFaces;\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this._native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_detail(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {detail: val}}));\r\n  }\r\n\r\n  get G_detail() {\r\n    return this._native.geometry.parameters.detail;\r\n  }\r\n\r\n  clone() {\r\n    return new Polyhedron({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Polyhedron\r\n};\r\n"]}