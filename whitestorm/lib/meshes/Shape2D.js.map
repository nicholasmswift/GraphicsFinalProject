{"version":3,"sources":["meshes/Shape2D.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AAEZ;;AACA;;;;;;IAEM,O;;;AACJ,qBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,yGACjB,MADiB,EACT,SADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ;AADc,KAAxB;;AAIA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,8FAAW,SAAX;AACD;AAVsB;AAWxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,WAAW,uBAAa,OAAO,QAApB,CAAjB;;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,MAAM,IAAV,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAEb,QAFa,CAAf;;AAKA;AACD,OAPM,CAAP;AAQD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,mBAA1C,GAAgE,MAAM,aAAzF;;AAEA,aAAO,IAAI,UAAJ,CACL,OAAO,QAAP,CAAgB,MADX,CAAP;AAGD;;;4BAUO;AACN,aAAO,IAAI,OAAJ,CAAY,EAAC,OAAO,KAAR,EAAZ,EAA4B,IAA5B,CAAiC,IAAjC,CAAP;AACD;;;sBAVY,G,EAAK;AAChB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEc;AACb,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,MAAxC;AACD;;;;;QAQD,O,GAAA,O","file":"Shape2D.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Shape2D extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'shape2D');\r\n\r\n    extend(params.geometry, {\r\n      shapes: []\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap('onlyvis');\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new THREE.Mesh(\r\n        this.buildGeometry(params),\r\n        material\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.ShapeBufferGeometry : THREE.ShapeGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.shapes\r\n    );\r\n  }\r\n\r\n  set G_shapes(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {shapes: val}}));\r\n  }\r\n\r\n  get G_shapes() {\r\n    return this._native.geometry.parameters.shapes;\r\n  }\r\n\r\n  clone() {\r\n    return new Shape2D({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Shape2D\r\n};\r\n"]}