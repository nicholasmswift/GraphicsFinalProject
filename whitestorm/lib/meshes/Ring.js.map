{"version":3,"sources":["meshes/Ring.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AAEZ;;AACA;;;;;;IAEM,I;;;AACJ,kBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,sGACjB,MADiB,EACT,MADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,mBAAa,CADS;AAEtB,mBAAa,EAFS;AAGtB,qBAAe,CAHO;AAItB,mBAAa,CAJS;AAKtB,kBAAY,CALU;AAMtB,mBAAa,KAAK,EAAL,GAAU;AAND,KAAxB;;AASA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,2FAAW,SAAX;AACD;AAfsB;AAgBxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,WAAW,uBAAa,OAAO,QAApB,CAAjB;;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,MAAM,IAAV,CACb,IAAI,MAAM,YAAV,CACE,OAAO,QAAP,CAAgB,WADlB,EAEE,OAAO,QAAP,CAAgB,WAFlB,EAGE,OAAO,QAAP,CAAgB,aAHlB,EAIE,OAAO,QAAP,CAAgB,WAJlB,EAKE,OAAO,QAAP,CAAgB,UALlB,EAME,OAAO,QAAP,CAAgB,WANlB,CADa,EAUb,QAVa,CAAf;;AAaA;AACD,OAfM,CAAP;AAgBD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,kBAA1C,GAA+D,MAAM,YAAxF;;AAEA,aAAO,IAAI,UAAJ,CACL,OAAO,QAAP,CAAgB,WADX,EAEL,OAAO,QAAP,CAAgB,WAFX,EAGL,OAAO,QAAP,CAAgB,aAHX,EAIL,OAAO,QAAP,CAAgB,WAJX,EAKL,OAAO,QAAP,CAAgB,UALX,EAML,OAAO,QAAP,CAAgB,WANX,CAAP;AAQD;;;4BAkDO;AACN,aAAO,IAAI,IAAJ,CAAS,EAAC,OAAO,KAAR,EAAT,EAAyB,IAAzB,CAA8B,IAA9B,CAAP;AACD;;;sBAlDiB,G,EAAK;AACrB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,aAAa,GAAd,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEmB;AAClB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,WAAxC;AACD;;;sBAEiB,G,EAAK;AACrB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,aAAa,GAAd,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEmB;AAClB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,WAAxC;AACD;;;sBAEmB,G,EAAK;AACvB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEqB;AACpB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,aAAxC;AACD;;;sBAEiB,G,EAAK;AACrB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,aAAa,GAAd,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEmB;AAClB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,WAAxC;AACD;;;sBAEgB,G,EAAK;AACpB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,YAAY,GAAb,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEkB;AACjB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,UAAxC;AACD;;;sBAEiB,G,EAAK;AACrB,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,aAAa,GAAd,EAAX,EAAlB,CAAnB,CAAxB;AACD,K;wBAEmB;AAClB,aAAO,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAiC,WAAxC;AACD;;;;;QAQD,I,GAAA,I","file":"Ring.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Ring extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'ring');\r\n\r\n    extend(params.geometry, {\r\n      innerRadius: 0,\r\n      outerRadius: 50,\r\n      thetaSegments: 8,\r\n      phiSegments: 8,\r\n      thetaStart: 0,\r\n      thetaLength: Math.PI * 2\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap('onlyvis');\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new THREE.Mesh(\r\n        new THREE.RingGeometry(\r\n          params.geometry.innerRadius,\r\n          params.geometry.outerRadius,\r\n          params.geometry.thetaSegments,\r\n          params.geometry.phiSegments,\r\n          params.geometry.thetaStart,\r\n          params.geometry.thetaLength\r\n        ),\r\n\r\n        material\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.RingBufferGeometry : THREE.RingGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.innerRadius,\r\n      params.geometry.outerRadius,\r\n      params.geometry.thetaSegments,\r\n      params.geometry.phiSegments,\r\n      params.geometry.thetaStart,\r\n      params.geometry.thetaLength\r\n    );\r\n  }\r\n\r\n  set G_innerRadius(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {innerRadius: val}}));\r\n  }\r\n\r\n  get G_innerRadius() {\r\n    return this._native.geometry.parameters.innerRadius;\r\n  }\r\n\r\n  set G_outerRadius(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {outerRadius: val}}));\r\n  }\r\n\r\n  get G_outerRadius() {\r\n    return this._native.geometry.parameters.outerRadius;\r\n  }\r\n\r\n  set G_thetaSegments(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {thetaSegments: val}}));\r\n  }\r\n\r\n  get G_thetaSegments() {\r\n    return this._native.geometry.parameters.thetaSegments;\r\n  }\r\n\r\n  set G_phiSegments(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {phiSegments: val}}));\r\n  }\r\n\r\n  get G_phiSegments() {\r\n    return this._native.geometry.parameters.phiSegments;\r\n  }\r\n\r\n  set G_thetaStart(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {thetaStart: val}}));\r\n  }\r\n\r\n  get G_thetaStart() {\r\n    return this._native.geometry.parameters.thetaStart;\r\n  }\r\n\r\n  set G_thetaLength(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {thetaLength: val}}));\r\n  }\r\n\r\n  get G_thetaLength() {\r\n    return this._native.geometry.parameters.thetaLength;\r\n  }\r\n\r\n  clone() {\r\n    return new Ring({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Ring\r\n};\r\n"]}