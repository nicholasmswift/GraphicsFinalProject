{"version":3,"sources":["meshes/Torus.js"],"names":[],"mappings":"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","file":"Torus.js","sourcesContent":["import * as THREE from 'three';\r\nimport {ConvexMesh, ConcaveMesh, SoftMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Torus extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'torus');\r\n\r\n    extend(params.geometry, {\r\n      radius: 100,\r\n      tube: 40,\r\n      radialSegments: 8,\r\n      tubularSegments: 6,\r\n      arc: Math.PI * 2\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = SoftMesh;\r\n    else if (this.physics && this.physics.type === 'concave') Mesh = ConcaveMesh;\r\n    else if (this.physics) Mesh = ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.TorusBufferGeometry : THREE.TorusGeometry;\r\n\r\n    return new THREE.TorusGeometry(\r\n      params.geometry.radius,\r\n      params.geometry.tube,\r\n      params.geometry.radialSegments,\r\n      params.geometry.tubularSegments,\r\n      params.geometry.arc\r\n    );\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this._native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_tube(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {tube: val}}));\r\n  }\r\n\r\n  get G_tube() {\r\n    return this._native.geometry.parameters.tube;\r\n  }\r\n\r\n  set G_radialSegments(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radialSegments: val}}));\r\n  }\r\n\r\n  get G_radialSegments() {\r\n    return this._native.geometry.parameters.radialSegments;\r\n  }\r\n\r\n  set G_tubularSegments(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {tubularSegments: val}}));\r\n  }\r\n\r\n  get G_tubularSegments() {\r\n    return this._native.geometry.parameters.tubularSegments;\r\n  }\r\n\r\n  set G_arc(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {arc: val}}));\r\n  }\r\n\r\n  get G_arc() {\r\n    return this._native.geometry.parameters.arc;\r\n  }\r\n\r\n  clone() {\r\n    return new Torus({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Torus\r\n};\r\n"]}