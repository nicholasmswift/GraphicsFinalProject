{"version":3,"sources":["meshes/Cylinder.js"],"names":[],"mappings":"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","file":"Cylinder.js","sourcesContent":["import * as THREE from 'three';\r\nimport {CylinderMesh, SoftMesh} from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial} from '../extras/api';\r\n\r\nclass Cylinder extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'cylinder');\r\n\r\n    extend(params.geometry, {\r\n      radiusTop: 0,\r\n      radiusBottom: 1,\r\n      height: 1,\r\n      radiusSegments: 32,\r\n      heightSegments: 1,\r\n      openEnded: false,\r\n      thetaStart: 0,\r\n      thetaLength: Math.PI * 2\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = SoftMesh;\r\n    else if (this.physics) Mesh = CylinderMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.CylinderBufferGeometry : THREE.CylinderGeometry;\r\n\r\n    const geometry = new GConstruct(\r\n      params.geometry.radiusTop,\r\n      params.geometry.radiusBottom,\r\n      params.geometry.height,\r\n      params.geometry.radiusSegments,\r\n      params.geometry.heightSegments,\r\n      params.geometry.openEnded,\r\n      params.geometry.thetaStart,\r\n      params.geometry.thetaLength\r\n    );\r\n\r\n    if (params.softbody) this.proccessSoftbodyGeometry(geometry);\r\n\r\n    return geometry;\r\n  }\r\n\r\n  set G_radiusTop(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusTop: val}}));\r\n  }\r\n\r\n  get G_radiusTop() {\r\n    return this._native.geometry.parameters.radiusTop;\r\n  }\r\n\r\n  set G_radiusBottom(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusBottom: val}}));\r\n  }\r\n\r\n  get G_radiusBottom() {\r\n    return this._native.geometry.parameters.radiusBottom;\r\n  }\r\n\r\n  set G_height(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {height: val}}));\r\n  }\r\n\r\n  get G_height() {\r\n    return this._native.geometry.parameters.height;\r\n  }\r\n\r\n  set G_radiusSegments(val) {\r\n    this._native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusSegments: val}}));\r\n  }\r\n\r\n  get G_radiusSegments() {\r\n    return this._native.geometry.parameters.radiusSegments;\r\n  }\r\n\r\n  clone() {\r\n    return new Cylinder({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Cylinder\r\n};\r\n"]}